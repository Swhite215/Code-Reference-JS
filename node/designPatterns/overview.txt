Design Patterns - Reusable and Reliable solutions to problems we face frequently

Gang of Four - Elements of Reusable Object-Oriented Software, Richard Helm, Ralph Johnson, Erich Gamma, John Vlissides

Design Pattern Essentials
    1. Pattern Name
    2. Problem
    3. Solution
    4. Consequences

Design Pattern Categories
    1. Creational - Abstract Factory, Builder, Factory Method, Protoype, Singleton
    2. Structural- Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy
    3. Behavioral - Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Mementor, Observer, State, Strategy, Template Method, Visitor
    4. Other - Module, Revealing Module, Revealing Constructor, Callback, Middleware, Reactor, Blockchain, Scheduler, Publisher Subscriber

Anti-Patterns - Bad solutions that cause problems
    1. Modifying prototype
    2. Synchronous execution after initialization
    3. Callback hell
    4. Telescoping Constructor - Constructor with too many arguments becomes confusing to understand what those arguments are later in our code.

Creational Patterns:
    1. Singleton - Ensure a class only has one instance, and provide a global point of access to it.
    2. Prototype - Instantiates a new object by copying all of the properties of an existing object, creating an independent clone.
    3. Factory - Define an interface for creating an object, but let subclasses decide which class to instantiate. Lets a class defer instantion to subclasses
    4. Builder - Separate the construction of a complex object from its representation so that the same construction process can create different representations.
    5. Abstract Factory - Used to provde a client with a set of related or dependant objects. The "family" of objects created by the factory are determined at run-time.

Structural Patterns:
    1. Adapter - Convert the interface of a class into another clients expect. Adapter lets classes work together that couldn't otherwise because of incompatiable interfaces.
    2. Proxy - Provide a surrogate or placeholder for another object to control access to it.
    3. Composite - Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.
    4. Decorator - Attach Additional Responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.
    5. Bridge - Used to separate the abstract elements of a class from the implementation details, providing the means to replace the implementation details without modifying the abstraction.
    6. Facade - Used to define a simplified interface to a more complex subsystem.
    7. Flyweight - Used to reduce the memory and resource usage for complex models containing many hundreds, thousands or hundreds of thousands of similar objects

Behavioral Patterns:
    1. Chain of Responsibility - Avoid coupling the sender of a request to its receiver by giving more than one object a chance to deal with the request. Chain the receiving objects and pas the request along the chain.
    2. Command - Encapsulate a request as an object, thereby letting you parameterize with different requests, queue or log requests, and support undoable operations.
    3. Iterator - Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.
    4. Observer - Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
    5. Strategy - Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets algorithm vary independently from clients that use it.
    6. Interpreter - Used to define the grammar for instructions that form part of a language or notation, whilst allowing the grammar to be easily extended.
    7. Mediator - Used to reduce coupling between classes that communicate with each other. Instead of class communicating directly, and thus requiring knowledge of their implementation, the classes send messages via a mediator object.
    8. Memento - Used to capture the current state of an object, and store it in such a manner that it can be restored at a later time without breaking the rules of encapsulation.
    9. State - Used to alter the behaviour of an object as its internal state changes. The pattern allows the class for an object to apparently change at run-time.
    10. Template Method - Used to define the basic steps of an algorithm and allow the implementation of the individual steps to be changed.
    11. Visitor - Used to separate a relatively complex set of structured data classes from the functionality that may be performed upon the data they hold.

Model-View-Controller Pattern
    1. Models - Data Resides
    2. Views - Visuals
    3. Controllers - Business Logic

Model-View-Presenter Pattern
    1. Models - Data
    2. Views - View
    3. Presenters - Logic
    4. View has no access to model, view passes through presenter to model

Model-View-ViewModel/Model-View-ViewControlls Pattern
    1. Models - Data
    2. View - Stateless
    3. ViewModel - Logic and State of Data